/**
 * @flow
 */

// Code generated by Prisma (prisma@1.22.1). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import type { GraphQLSchema, DocumentNode } from "graphql";
import type { BasePrismaOptions as BPOType, Options } from "prisma-client-lib";
import { makePrismaClientClass } from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

type NodePromise = Promise<Node>;

type AtLeastOne<T> = $Shape<T>;

export interface Exists {
  event(where?: EventWhereInput): Promise<boolean>;
  user(where?: UserWhereInput): Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

interface PrismaInterface {
  $exists: Exists;
  $graphql: <T: any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  event: (where: EventWhereUniqueInput) => EventPromise;
  events: (args?: {
    where?: EventWhereInput,
    orderBy?: EventOrderByInput,
    skip?: Int,
    after?: String,
    before?: String,
    first?: Int,
    last?: Int
  }) => FragmentableArray<Event>;
  eventsConnection: (args?: {
    where?: EventWhereInput,
    orderBy?: EventOrderByInput,
    skip?: Int,
    after?: String,
    before?: String,
    first?: Int,
    last?: Int
  }) => EventConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserPromise;
  users: (args?: {
    where?: UserWhereInput,
    orderBy?: UserOrderByInput,
    skip?: Int,
    after?: String,
    before?: String,
    first?: Int,
    last?: Int
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput,
    orderBy?: UserOrderByInput,
    skip?: Int,
    after?: String,
    before?: String,
    first?: Int,
    last?: Int
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createEvent: (data: EventCreateInput) => EventPromise;
  updateEvent: (args: {
    data: EventUpdateInput,
    where: EventWhereUniqueInput
  }) => EventPromise;
  updateManyEvents: (args: {
    data: EventUpdateManyMutationInput,
    where?: EventWhereInput
  }) => BatchPayloadPromise;
  upsertEvent: (args: {
    where: EventWhereUniqueInput,
    create: EventCreateInput,
    update: EventUpdateInput
  }) => EventPromise;
  deleteEvent: (where: EventWhereUniqueInput) => EventPromise;
  deleteManyEvents: (where?: EventWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput,
    where: UserWhereUniqueInput
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput,
    where?: UserWhereInput
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput,
    create: UserCreateInput,
    update: UserUpdateInput
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  event: (
    where?: EventSubscriptionWhereInput
  ) => EventSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export type ClientConstructor<T> = (options?: BPOType) => T;

/**
 * Types
 */

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "email_ASC"
  | "email_DESC"
  | "name_ASC"
  | "name_DESC"
  | "nick_ASC"
  | "nick_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type EventOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "eventType_ASC"
  | "eventType_DESC"
  | "title_ASC"
  | "title_DESC"
  | "date_ASC"
  | "date_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type EventType =
  | "Bicycling"
  | "MTB"
  | "Running"
  | "Swimming"
  | "Orienteering"
  | "Triathlon"
  | "Other"
  | "Happening"
  | "Ultras";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface UserUpdateWithWhereUniqueWithoutEventsInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutEventsDataInput;
}

export type EventWhereUniqueInput = AtLeastOne<{
  id: ID_Input
}>;

export interface EventUpdateWithWhereUniqueWithoutCreatorInput {
  where: EventWhereUniqueInput;
  data: EventUpdateWithoutCreatorDataInput;
}

export interface EventWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[];
  id_not_in?: ID_Input[];
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  eventType?: EventType;
  eventType_not?: EventType;
  eventType_in?: EventType[];
  eventType_not_in?: EventType[];
  title?: String;
  title_not?: String;
  title_in?: String[];
  title_not_in?: String[];
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  participants_every?: UserWhereInput;
  participants_some?: UserWhereInput;
  participants_none?: UserWhereInput;
  creator?: UserWhereInput;
  date?: DateTimeInput;
  date_not?: DateTimeInput;
  date_in?: DateTimeInput[];
  date_not_in?: DateTimeInput[];
  date_lt?: DateTimeInput;
  date_lte?: DateTimeInput;
  date_gt?: DateTimeInput;
  date_gte?: DateTimeInput;
  AND?: EventWhereInput[];
  OR?: EventWhereInput[];
  NOT?: EventWhereInput[];
}

export interface EventUpdateWithoutCreatorDataInput {
  eventType?: EventType;
  title?: String;
  participants?: UserUpdateManyWithoutEventsInput;
  date?: DateTimeInput;
}

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[];
  id_not_in?: ID_Input[];
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  email?: String;
  email_not?: String;
  email_in?: String[];
  email_not_in?: String[];
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  name?: String;
  name_not?: String;
  name_in?: String[];
  name_not_in?: String[];
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  nick?: String;
  nick_not?: String;
  nick_in?: String[];
  nick_not_in?: String[];
  nick_lt?: String;
  nick_lte?: String;
  nick_gt?: String;
  nick_gte?: String;
  nick_contains?: String;
  nick_not_contains?: String;
  nick_starts_with?: String;
  nick_not_starts_with?: String;
  nick_ends_with?: String;
  nick_not_ends_with?: String;
  events_every?: EventWhereInput;
  events_some?: EventWhereInput;
  events_none?: EventWhereInput;
  creator_every?: EventWhereInput;
  creator_some?: EventWhereInput;
  creator_none?: EventWhereInput;
  AND?: UserWhereInput[];
  OR?: UserWhereInput[];
  NOT?: UserWhereInput[];
}

export interface EventCreateManyWithoutParticipantsInput {
  create?: EventCreateWithoutParticipantsInput[];
  connect?: EventWhereUniqueInput[];
}

export interface UserUpdateOneRequiredWithoutCreatorInput {
  create?: UserCreateWithoutCreatorInput;
  update?: UserUpdateWithoutCreatorDataInput;
  upsert?: UserUpsertWithoutCreatorInput;
  connect?: UserWhereUniqueInput;
}

export interface EventCreateWithoutParticipantsInput {
  eventType?: EventType;
  title: String;
  creator: UserCreateOneWithoutCreatorInput;
  date: DateTimeInput;
}

export interface EventUpsertWithWhereUniqueWithoutCreatorInput {
  where: EventWhereUniqueInput;
  update: EventUpdateWithoutCreatorDataInput;
  create: EventCreateWithoutCreatorInput;
}

export interface EventUpdateInput {
  eventType?: EventType;
  title?: String;
  participants?: UserUpdateManyWithoutEventsInput;
  creator?: UserUpdateOneRequiredWithoutCreatorInput;
  date?: DateTimeInput;
}

export interface EventSubscriptionWhereInput {
  mutation_in?: MutationType[];
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[];
  updatedFields_contains_some?: String[];
  node?: EventWhereInput;
  AND?: EventSubscriptionWhereInput[];
  OR?: EventSubscriptionWhereInput[];
  NOT?: EventSubscriptionWhereInput[];
}

export interface UserUpdateManyWithoutEventsInput {
  create?: UserCreateWithoutEventsInput[];
  delete?: UserWhereUniqueInput[];
  connect?: UserWhereUniqueInput[];
  disconnect?: UserWhereUniqueInput[];
  update?: UserUpdateWithWhereUniqueWithoutEventsInput[];
  upsert?: UserUpsertWithWhereUniqueWithoutEventsInput[];
  deleteMany?: UserScalarWhereInput[];
  updateMany?: UserUpdateManyWithWhereNestedInput[];
}

export interface UserUpdateInput {
  email?: String;
  name?: String;
  nick?: String;
  events?: EventUpdateManyWithoutParticipantsInput;
  creator?: EventUpdateManyWithoutCreatorInput;
}

export interface EventUpdateWithoutParticipantsDataInput {
  eventType?: EventType;
  title?: String;
  creator?: UserUpdateOneRequiredWithoutCreatorInput;
  date?: DateTimeInput;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input,
  email?: String
}>;

export interface UserUpdateWithoutEventsDataInput {
  email?: String;
  name?: String;
  nick?: String;
  creator?: EventUpdateManyWithoutCreatorInput;
}

export interface UserUpsertWithoutCreatorInput {
  update: UserUpdateWithoutCreatorDataInput;
  create: UserCreateWithoutCreatorInput;
}

export interface EventUpdateManyWithoutCreatorInput {
  create?: EventCreateWithoutCreatorInput[];
  delete?: EventWhereUniqueInput[];
  connect?: EventWhereUniqueInput[];
  disconnect?: EventWhereUniqueInput[];
  update?: EventUpdateWithWhereUniqueWithoutCreatorInput[];
  upsert?: EventUpsertWithWhereUniqueWithoutCreatorInput[];
  deleteMany?: EventScalarWhereInput[];
  updateMany?: EventUpdateManyWithWhereNestedInput[];
}

export interface UserCreateManyWithoutEventsInput {
  create?: UserCreateWithoutEventsInput[];
  connect?: UserWhereUniqueInput[];
}

export interface EventUpdateWithWhereUniqueWithoutParticipantsInput {
  where: EventWhereUniqueInput;
  data: EventUpdateWithoutParticipantsDataInput;
}

export interface EventCreateManyWithoutCreatorInput {
  create?: EventCreateWithoutCreatorInput[];
  connect?: EventWhereUniqueInput[];
}

export interface EventUpdateManyWithoutParticipantsInput {
  create?: EventCreateWithoutParticipantsInput[];
  delete?: EventWhereUniqueInput[];
  connect?: EventWhereUniqueInput[];
  disconnect?: EventWhereUniqueInput[];
  update?: EventUpdateWithWhereUniqueWithoutParticipantsInput[];
  upsert?: EventUpsertWithWhereUniqueWithoutParticipantsInput[];
  deleteMany?: EventScalarWhereInput[];
  updateMany?: EventUpdateManyWithWhereNestedInput[];
}

export interface UserCreateOneWithoutCreatorInput {
  create?: UserCreateWithoutCreatorInput;
  connect?: UserWhereUniqueInput;
}

export interface UserUpdateWithoutCreatorDataInput {
  email?: String;
  name?: String;
  nick?: String;
  events?: EventUpdateManyWithoutParticipantsInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[];
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[];
  updatedFields_contains_some?: String[];
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[];
  OR?: UserSubscriptionWhereInput[];
  NOT?: UserSubscriptionWhereInput[];
}

export interface EventScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[];
  id_not_in?: ID_Input[];
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  eventType?: EventType;
  eventType_not?: EventType;
  eventType_in?: EventType[];
  eventType_not_in?: EventType[];
  title?: String;
  title_not?: String;
  title_in?: String[];
  title_not_in?: String[];
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  date?: DateTimeInput;
  date_not?: DateTimeInput;
  date_in?: DateTimeInput[];
  date_not_in?: DateTimeInput[];
  date_lt?: DateTimeInput;
  date_lte?: DateTimeInput;
  date_gt?: DateTimeInput;
  date_gte?: DateTimeInput;
  AND?: EventScalarWhereInput[];
  OR?: EventScalarWhereInput[];
  NOT?: EventScalarWhereInput[];
}

export interface UserCreateInput {
  email?: String;
  name: String;
  nick: String;
  events?: EventCreateManyWithoutParticipantsInput;
  creator?: EventCreateManyWithoutCreatorInput;
}

export interface EventUpdateManyWithWhereNestedInput {
  where: EventScalarWhereInput;
  data: EventUpdateManyDataInput;
}

export interface EventUpsertWithWhereUniqueWithoutParticipantsInput {
  where: EventWhereUniqueInput;
  update: EventUpdateWithoutParticipantsDataInput;
  create: EventCreateWithoutParticipantsInput;
}

export interface EventUpdateManyDataInput {
  eventType?: EventType;
  title?: String;
  date?: DateTimeInput;
}

export interface UserCreateWithoutEventsInput {
  email?: String;
  name: String;
  nick: String;
  creator?: EventCreateManyWithoutCreatorInput;
}

export interface UserUpdateManyDataInput {
  email?: String;
  name?: String;
  nick?: String;
}

export interface UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput;
  data: UserUpdateManyDataInput;
}

export interface UserScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[];
  id_not_in?: ID_Input[];
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  email?: String;
  email_not?: String;
  email_in?: String[];
  email_not_in?: String[];
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  name?: String;
  name_not?: String;
  name_in?: String[];
  name_not_in?: String[];
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  nick?: String;
  nick_not?: String;
  nick_in?: String[];
  nick_not_in?: String[];
  nick_lt?: String;
  nick_lte?: String;
  nick_gt?: String;
  nick_gte?: String;
  nick_contains?: String;
  nick_not_contains?: String;
  nick_starts_with?: String;
  nick_not_starts_with?: String;
  nick_ends_with?: String;
  nick_not_ends_with?: String;
  AND?: UserScalarWhereInput[];
  OR?: UserScalarWhereInput[];
  NOT?: UserScalarWhereInput[];
}

export interface UserUpsertWithWhereUniqueWithoutEventsInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutEventsDataInput;
  create: UserCreateWithoutEventsInput;
}

export interface EventCreateWithoutCreatorInput {
  eventType?: EventType;
  title: String;
  participants?: UserCreateManyWithoutEventsInput;
  date: DateTimeInput;
}

export interface EventCreateInput {
  eventType?: EventType;
  title: String;
  participants?: UserCreateManyWithoutEventsInput;
  creator: UserCreateOneWithoutCreatorInput;
  date: DateTimeInput;
}

export interface EventUpdateManyMutationInput {
  eventType?: EventType;
  title?: String;
  date?: DateTimeInput;
}

export interface UserUpdateManyMutationInput {
  email?: String;
  name?: String;
  nick?: String;
}

export interface UserCreateWithoutCreatorInput {
  email?: String;
  name: String;
  nick: String;
  events?: EventCreateManyWithoutParticipantsInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserPreviousValues {
  id: ID_Output;
  email?: String;
  name: String;
  nick: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  name: () => Promise<String>;
  nick: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  nick: () => Promise<AsyncIterator<String>>;
}

export interface AggregateEvent {
  count: Int;
}

export interface AggregateEventPromise
  extends Promise<AggregateEvent>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateEventSubscription
  extends Promise<AsyncIterator<AggregateEvent>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface User {
  id: ID_Output;
  email?: String;
  name: String;
  nick: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  name: () => Promise<String>;
  nick: () => Promise<String>;
  events: <T: FragmentableArray<Event>>(args?: {
    where?: EventWhereInput,
    orderBy?: EventOrderByInput,
    skip?: Int,
    after?: String,
    before?: String,
    first?: Int,
    last?: Int
  }) => T;
  creator: <T: FragmentableArray<Event>>(args?: {
    where?: EventWhereInput,
    orderBy?: EventOrderByInput,
    skip?: Int,
    after?: String,
    before?: String,
    first?: Int,
    last?: Int
  }) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  nick: () => Promise<AsyncIterator<String>>;
  events: <T: Promise<AsyncIterator<EventSubscription>>>(args?: {
    where?: EventWhereInput,
    orderBy?: EventOrderByInput,
    skip?: Int,
    after?: String,
    before?: String,
    first?: Int,
    last?: Int
  }) => T;
  creator: <T: Promise<AsyncIterator<EventSubscription>>>(args?: {
    where?: EventWhereInput,
    orderBy?: EventOrderByInput,
    skip?: Int,
    after?: String,
    before?: String,
    first?: Int,
    last?: Int
  }) => T;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T: UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T: UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T: UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T: UserPreviousValuesSubscription>() => T;
}

export interface Event {
  id: ID_Output;
  eventType?: EventType;
  title: String;
  date: DateTimeOutput;
}

export interface EventPromise extends Promise<Event>, Fragmentable {
  id: () => Promise<ID_Output>;
  eventType: () => Promise<EventType>;
  title: () => Promise<String>;
  participants: <T: FragmentableArray<User>>(args?: {
    where?: UserWhereInput,
    orderBy?: UserOrderByInput,
    skip?: Int,
    after?: String,
    before?: String,
    first?: Int,
    last?: Int
  }) => T;
  creator: <T: UserPromise>() => T;
  date: () => Promise<DateTimeOutput>;
}

export interface EventSubscription
  extends Promise<AsyncIterator<Event>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  eventType: () => Promise<AsyncIterator<EventType>>;
  title: () => Promise<AsyncIterator<String>>;
  participants: <T: Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput,
    orderBy?: UserOrderByInput,
    skip?: Int,
    after?: String,
    before?: String,
    first?: Int,
    last?: Int
  }) => T;
  creator: <T: UserSubscription>() => T;
  date: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface EventEdge {
  cursor: String;
}

export interface EventEdgePromise extends Promise<EventEdge>, Fragmentable {
  node: <T: EventPromise>() => T;
  cursor: () => Promise<String>;
}

export interface EventEdgeSubscription
  extends Promise<AsyncIterator<EventEdge>>,
    Fragmentable {
  node: <T: EventSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface EventSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface EventSubscriptionPayloadPromise
  extends Promise<EventSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T: EventPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T: EventPreviousValuesPromise>() => T;
}

export interface EventSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<EventSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T: EventSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T: EventPreviousValuesSubscription>() => T;
}

export interface EventPreviousValues {
  id: ID_Output;
  eventType?: EventType;
  title: String;
  date: DateTimeOutput;
}

export interface EventPreviousValuesPromise
  extends Promise<EventPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  eventType: () => Promise<EventType>;
  title: () => Promise<String>;
  date: () => Promise<DateTimeOutput>;
}

export interface EventPreviousValuesSubscription
  extends Promise<AsyncIterator<EventPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  eventType: () => Promise<AsyncIterator<EventType>>;
  title: () => Promise<AsyncIterator<String>>;
  date: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface EventConnection {}

export interface EventConnectionPromise
  extends Promise<EventConnection>,
    Fragmentable {
  pageInfo: <T: PageInfoPromise>() => T;
  edges: <T: FragmentableArray<EventEdge>>() => T;
  aggregate: <T: AggregateEventPromise>() => T;
}

export interface EventConnectionSubscription
  extends Promise<AsyncIterator<EventConnection>>,
    Fragmentable {
  pageInfo: <T: PageInfoSubscription>() => T;
  edges: <T: Promise<AsyncIterator<EventEdgeSubscription>>>() => T;
  aggregate: <T: AggregateEventSubscription>() => T;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface UserConnection {}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T: PageInfoPromise>() => T;
  edges: <T: FragmentableArray<UserEdge>>() => T;
  aggregate: <T: AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T: PageInfoSubscription>() => T;
  edges: <T: Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T: AggregateUserSubscription>() => T;
}

export interface UserEdge {
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T: UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T: UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

export type Long = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/**
 * Model Metadata
 */

export const models = [
  {
    name: "Event",
    embedded: false
  },
  {
    name: "EventType",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma: ClientConstructor<PrismaInterface> = makePrismaClientClass(
  { typeDefs, models, endpoint: `${process.env["PRISMA_ENDPOINT"]}` }
);

export const prisma = new Prisma();
